using R2API;
using RoR2;
using UnityEngine;
using BepInEx.Configuration;

namespace GOTCE.Items.NoTier
{
    public class DreamPDF : ItemBase<DreamPDF>
    {
        public override string ConfigName => "dream.pdf";

        public override string ItemName => "dream.pdf";

        public override string ItemLangTokenName => "GOTCE_DreamPDF";

        public override string ItemPickupDesc => "dream.pdf";

        public override string ItemFullDescription => "Dream Investigation Results\r\nOfficial Report by the Minecraft Speedrunning Team\r\nPublished: December 11, 2020\r\nUpdated: December 15, 2020\r\n1\r\nContents\r\nI Introduction 3\r\n1 Mechanics 3\r\n2 Motivation 3\r\n3 Objectivity 4\r\nII Data 5\r\n4 Piglin Bartering 5\r\n5 Blaze Rod Drops 6\r\nIII Analysis 6\r\n6 Methodology 6\r\n7 The Binomial Distribution 8\r\n7.1 The Intuition . . . . . . . . . . . . . . . . . . . . . . . . . . 8\r\n7.2 Generalizing the Binomial Distribution . . . . . . . . . . . . 8\r\n7.3 The Cumulative Distribution Function (CDF) . . . . . . . . 9\r\n8 Addressing Bias 10\r\n8.1 Accounting for Optional Stopping . . . . . . . . . . . . . . 10\r\n8.2 Sampling Bias in Stream Selection . . . . . . . . . . . . . . 11\r\n8.3 Sampling Bias in Runner Selection . . . . . . . . . . . . . . 12\r\n8.4 P-hacking . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\r\n9 Code Analysis 14\r\n9.1 Confirming the Probabilities . . . . . . . . . . . . . . . . . . 14\r\n9.2 Setting RNG Seeds . . . . . . . . . . . . . . . . . . . . . . 15\r\n9.3 Linear Congruential Generators . . . . . . . . . . . . . . . . 16\r\n9.4 Periodicity . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\r\n9.5 Bartering . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\r\n9.6 Blaze Drops . . . . . . . . . . . . . . . . . . . . . . . . . . 19\r\nIV Results 20\r\n10 Computation 20\r\n10.1 Naive Estimate . . . . . . . . . . . . . . . . . . . . . . . . 20\r\n10.2 Full Computation . . . . . . . . . . . . . . . . . . . . . . . 21\r\n10.2.1 Pearls . . . . . . . . . . . . . . . . . . . . . . . . . 21\r\n10.2.2 Blaze Rods . . . . . . . . . . . . . . . . . . . . . . 21\r\n10.2.3 Combined Number . . . . . . . . . . . . . . . . . . 22\r\n11 Conclusion 23\r\nA Raw Data 24\r\nB Stopping Rule Computation Algorithm 25\r\nC Probability Computations 27\r\n2\r\nPart I\r\nIntroduction\r\n1 Mechanics\r\nNote: This section exists to explain Minecraft 1.16 Random Seed Glitchless speedruns to the\r\nunfamiliar reader. Motivation begins a discussion of why this investigation took place, and is a\r\nsuitable starting point for those already familiar with Minecraft speedruns.\r\nSpeedrunning is a hobby in which people compete to complete a video game as quickly as possible.\r\nThis paper concerns speedruns of Minecraft: Java Edition, and, in particular, speedruns of the\r\ncategory known as \"Any% Random Seed Glitchless\" (RSG) performed on version 1.16. A brief\r\nsummary of the relevant mechanics and speedrun strategies follows for the unfamiliar reader.\r\nThe final boss of Minecraft is located in an alternate dimension known as The End, which can\r\nbe accessed using End Portals. An end portal consists of twelve End Portal Frame blocks,\r\na random number (usually 10-12) of which must be filled with an Eye of Ender in order to\r\nactivate the portal. Thus, the runner is required to have up to twelve eyes of ender when they\r\narrive at the portal to be able to enter The End and complete the game.\r\nIn 1.16, the only way to obtain an eye of ender is by crafting it, which requires one Ender\r\nPearl and one Blaze Powder. Ender pearls can be obtained in several ways, but the fastest is\r\nto use a mechanic known as Bartering. In a barter, the player exchanges a Gold Ingot with a\r\nPiglin (a humanoid creature in the Nether dimension) for a randomly chosen item or group\r\nof items. For each barter, there is about a 5% chance (in 1.16.1) the piglin will give the player\r\nender pearls.\r\nBlaze powder is crafted out of Blaze Rods, which are dropped by Blazes—a hostile mob.\r\nUpon being killed, each blaze has a 50% chance of dropping one blaze rod.\r\nThe main focus during the beginning of a 1.16 RSG speedrun is to obtain (hopefully) 12 eyes\r\nof ender as quickly as possible, by bartering with piglins and killing blazes. These two parts of\r\nthe speedrun route are the primary concern of this paper.\r\n2 Motivation\r\nMembers of the Minecraft speedrunning communitya\r\nreviewed six consecutive livestreams of 1.16\r\nRSG speedrun attempts by Dreamb\r\nfrom early October 2020. The data collected show that 42 of\r\nthe 262 piglin barters performed throughout these streams yielded ender pearls, and 211 of the\r\n305 killed blazes dropped blaze rods. These results are exceptional, as the expected proportion\r\nof ender pearl barters and blaze rod drops is much, much lower.\r\nAn initially compelling counterclaim is that top-level RSG runners must get reasonably good\r\nluck in order to get a new personal best time in the first place, so, while it is surprising to see\r\nsuch an unlikely event, it is perhaps not unexpected. However, upon further research, Dream’s\r\nobserved drop rates are substantially greater than those of other top-level RSG runners—including,\r\nIllumina, Benex, Sizzler, and Vadikus. If nothing else, the drop rates from Dream’s streams are\r\nso exceptional that they ought to be analyzed for the sake of it, regardless of whether or not any\r\none individual believes they happened legitimately.\r\naThe data were originally reported by MinecrAvenger and danhem9.\r\nbhttps://www.twitch.tv/dreamwastaken\r\n3\r\n3 Objectivity\r\nThe reader should note that the authors of this document are solely motivated by the presence\r\nof exceptional empirical data, and that any runner—regardless of popularity, following, or skill—\r\nobserved experiencing such unlikely events would be held to the same level of scrutiny. The\r\nreader should also note that the data presented are extensively corrected for the existence of any\r\nbias. It would lack rigor and integrity for the conclusions made in this report to substantiate the\r\nmoderation team’s decision if they were merely based on a surface-level analysis of the data.\r\nIndeed, these corrections inherently skew the analysis in Dream’s favor. We aim to calculate not\r\nthe exact probability that this streak of luck occurred if Dream is innocent, but an upper bound\r\non the probability; that is, we will arrive at a value which we are certain is greater than the true\r\nprobability.\r\nThe goal of this document is to present the unbiased, rigorous statistical analysis of the data,\r\nas well as an analysis of the Minecraft source code, to conclusively determine whether or not\r\nsuch an event could be observed legitimately.\r\n4\r\nPart II\r\nData\r\nThe raw data (and its sources) from which the following graphs were derived can be found in\r\nAppendix A.\r\n4 Piglin Bartering\r\nFigure 1: Dream’s pearl barters, charted alongside various comparisons. The 99.9th percentile\r\nline represents one-in-a-thousand luck (calculated using a normal approximation), which is already\r\nquite unlikely—if not necessarily proof of anything.\r\n5\r\n5 Blaze Rod Drops\r\nFigure 2: The same for blaze rod drops.\r\nPart III\r\nAnalysis\r\n6 Methodology\r\nWhat follows is a thorough description of every aspect of our investigation in an accessible manner.\r\nWe will begin with an introduction to the binomial distribution, and follow with adjustments to\r\naccount for sampling bias and other biases lowering the accuracy of the binomial distribution.\r\nFinally, we will analyze Minecraft’s code to justify the assumptions made in our statistical\r\nmodel. To strengthen our analysis to the skeptical reader, we now preemptively address expected\r\ncriticisms and questions.\r\nWhy are you not analyzing all of Dream’s runs? Doesn’t that introduce sampling bias?\r\nYes. There is clearly sampling bias in the data set, but its presence does not invalidate our\r\nanalysis. Sampling bias is a common problem in real-world statistical analysis, so if it were\r\nimpossible to account for, then every analysis of empirical data would be biased and useless.\r\nConsider flipping a coin 100 times and getting heads 50 of those times (a mostly unremarkable\r\nresult). Within those 100 coin flips, however, imagine that 20 of the 50 heads occurred back-toback somewhere within the population. Despite the proportion overall being uninteresting, we\r\n6\r\nstill would not expect 20 consecutive heads anywhere. Obviously, choosing to investigate the\r\n20 heads introduces sampling bias—since we chose to look at those 20 flips because they were\r\nlucky, we took a biased sample.\r\nHowever, we can instead discuss the probability that 20 or more back-to-back heads occur at\r\nany point in the 100 flips. We can use that value to place an upper bound on the probability\r\nthat the sample we chose could possibly have been found with a fair coin, regardless of how\r\nbiased a method was used to choose the sample.\r\nIt’s also worth noting that the choice to only consider Dream’s most recent streak of 1.16\r\nstreams is the least arbitrary distinction we could have made. The metaphor of \"cherry-picking\"\r\nusually brings to mind choosing from a wide number of options, but there were at most a small\r\nhandful of options meaningfully equivalent to analyzing every stream since Dream’s return to\r\npublic streaming. Note the importance of the restriction that we must analyze the entire six\r\nstreams as a whole; true cherry-picking would specifically select individual barters to support a\r\ndesired conclusion.\r\nHow do we know this investigation isn’t biased?\r\nConcerns about the impartiality of the authors of this paper have been raised in discussion\r\nabout the investigation. We do not think this is a significant issue; we have made an effort to be\r\nas fair to Dream and thorough as possible in our investigation. Regardless, it is a concern worth\r\naddressing.\r\nThis paper has been written to be as accessible as possible to an audience without in-depth\r\nknowledge of statistics or programming. This is primarily so that you do not have to take our\r\nword for its accuracy. By reading the analysis, you should be able to understand at least on a\r\nbasic level why the statistical corrections we made account for all the relevant biases.\r\nAdditionally, as noted in Section 3: Objectivity, we aimed not to calculate the precise\r\nprobability of Dream experiencing these events, but an upper bound on the probability. This\r\nmakes it much more difficult for bias to have any effect; if we correct for the largest amount of\r\nbias in the data that there could possibly be, there is little risk our analysis will be skewed due to\r\nour bias causing us to underestimate how much we ought to correct.\r\nWe believe that, to the extent any bias exists, these measures should be more than sufficient\r\nto account for it. Additionally, note that we are not the only people capable of analyzing these\r\nevents—if any unbiased third party points out a flaw in our statistical analysis or notes a glitch\r\nthat could potentially cause these events, they would, of course, be taken seriously.\r\nWhat if Dream’s luck was balanced out by getting bad luck off stream?\r\nThis argument is sort of similar to the gambler’s fallacy. Essentially, what happened to Dream\r\nat any time outside of the streams in question is entirely irrelevant to the calculations we are\r\ndoing. Getting bad luck at one point in time does not make good luck at a different point in\r\ntime more likely.\r\nWe do care about how many times he has streamed, since those are additional opportunities\r\nfor Dream to have been noticed getting extremely lucky, and if he had gotten similarly lucky\r\nduring one of those streams an investigation still would have occurred. However, what luck\r\nDream actually got in any other instance is irrelevant to this analysis, as it has absolutely no\r\nbearing on how likely the luck was in this instance.\r\n7\r\n7 The Binomial Distribution\r\nNote: If the reader is equipped with a basic understanding of statistical analysis and the binomial\r\ndistribution, they may skip to Section 8: Addressing Bias. Note that the explanations present\r\nhere are sufficient for the probability calculations performed throughout the rest of the paper,\r\nbut are not exhaustive. Supplemental reading is provided via footnotes where relevant.\r\n7.1 The Intuition\r\nInformally, if the outcome of a particular event can be described as \"it either happens or it\r\ndoesn’t\", then it can be modeled with the binomial distributionc\r\n. For example, imagine we\r\nwanted to compute the odds of flipping a fair coind 10 times and having it land on heads exactly\r\n6 of those times. Since a coin either lands on heads or it doesn’t, we can use the formula for the\r\nbinomial distributione\r\nto determine the chance of this occurring.\r\nSince we flip the coin 10 times, we say 푛 = 10, and since we want exactly 6 of those flips to\r\nbe heads, 푘 = 6. The chance of a (fair) coin landing on heads is 50%, so 푝 = 0.5. If we plug\r\nthese values into the binomial distribution formula, we get\r\nP (6; 0.5, 10) =\r\n\u0012\r\n10\r\n6\r\n\u0013\r\n0.5\r\n6\r\n(1 − 0.5)\r\n10−6 ≈ 0.205 (1)\r\nTo interpret this value, if we flip a coin 10 times, we can expect to get exactly 6 heads about 20.5%\r\nof the time. To understand why this formula yields the probability of a binomial distribution,\r\nand how to generalize it, we break down each term.\r\n7.2 Generalizing the Binomial Distribution\r\nGenerically, the probability of exactly 푘 successes with probability 푝 occurring in 푛 trials (in our\r\nearlier example, 푘 = 6 heads with probability 푝 = 0.5 occurring in 푛 = 10 flips) is given by\r\nP (푘; 푝, 푛) =\r\n\u0012\r\n푛\r\n푘\r\n\u0013\r\n푝\r\n푘\r\n(1 − 푝)\r\n푛−푘\r\n(2)\r\nWe can deconstruct this formula term-by-term to understand why this represents the probability.\r\nBasically, this formula figures out how many distinct orderings of 푘 successes and 푛 − 푘 failures\r\nmeet the criteria, and then sums the probability of each orderingf\r\n.\r\nThe notation\r\n푛\r\n푘\r\n\u0001\r\n, read as \"푛 choose 푘\", represents the binomial coefficientg\r\n, which is the\r\nnumber of ways we can observe 푘 successes in 푛 trials—the number of ways, with 푛 options for\r\ntrials to be successes, you could \"choose\" 푘 of them. For example, there are two ways to observe\r\n푘 = 1 heads in 푛 = 2 coin flips. The head could occur on the first flip, or it could occur on the\r\nsecond flip. Therefore,\r\n2\r\n1\r\n\u0001\r\nis equivalent to 2. With similar reasoning,\r\n4\r\n2\r\n\u0001\r\nis equivalent to 6; there\r\ncThe binomial distribution also requires the assumption that we are observing discrete independent random\r\nvariables. Since piglin bartering and blaze drops are discrete independent random variables (see Section 9: Code\r\nAnalysis), we can safely make this assumption. There are other considerations about stopping rules which will be\r\naddressed in Section 8: Addressing Bias.\r\ndA \"fair coin\" is defined as one whose probability of landing on heads is exactly the same as its probability\r\nof landing on tails. We are also not considering the probability that the coin lands on its side, which is entirely\r\nnegligible for this introductory-level explanation to the binomial distribution.\r\nehttps://en.wikipedia.org/wiki/Binomial_distribution\r\nfFor an explanation of why this works, see https://www.youtube.com/watch?v=QE2uR6Z-NcU.\r\nghttps://en.wikipedia.org/wiki/Binomial_coefficient are 6 unique ways to distribute 2 successes (heads) across 4 trials (coin flips). (These are 1&2,\r\n1&3, 1&4, 2&3, 2&4, and 3&4.)\r\nAs the first term represents the number of distinct orderings, the next two terms represent\r\nthe probability of any one order. To find this probability, we simply take the product of the\r\nprobabilities of the events necessary to produce a given ordering; that is, the product of the\r\nprobability of observing 푘 successes and 푛 − 푘 failures.\r\nSince 푝 is the probability of a given trial being successful, and there are 푘 successful trials,\r\nwe can account for the successful trials with the term 푝\r\n푘\r\n(푝 multiplied by itself 푘 times)h\r\n.\r\nSimilarly, we account for the failures by raising the probability of a failure to the power of the\r\nnumber of failures. As the only two possibilities in a given trial are success and failure, and the\r\nprobabilities must sum to 1, the probability of a failure is (1 − 푝). It follows that, since each trial\r\nthat is not a success must be a failure, the number of failures is (푛 − 푘). Thus, the final term is\r\n(1 − 푝)\r\n푛−푘\r\n.\r\nMultiplying all three terms together yields the probability of a binomial distribution with a\r\ngiven 푘, 푝, and 푛.\r\n7.3 The Cumulative Distribution Function (CDF)\r\nIt would be helpful to have a way to compute the probability of observing 푘 or more successes.\r\nIntuitively, we can expect the probability of observing exactly 푘 successes in 푛 trials to be smaller\r\nthan the probability we observe 푘 or more successes in the same 푛 trials.\r\nReferring back to the coin-flipping example, if we wanted to compute the probability of\r\nobserving 6 or more heads within 10 trials, then we can simply add together the probabilities of\r\nobserving exactly 6 heads, exactly 7 heads, (...), exactly 10 heads, given by\r\nÕ\r\n10\r\n푘=6\r\n\u0012\r\n10\r\n푘\r\n\u0013\r\n0.5\r\n푘\r\n(1 − 0.5)\r\n10−푘 ≈ 0.377 (3)\r\nIndeed, this agrees with our intuition; it makes sense that it is more likely to get 6, 7, 8, 9, or 10\r\nheads in 10 flips, than it is to get exactly 6 heads in 10 flips.\r\nThe chance of receiving 푘 or more successes is often referred to as a 푝-value. More specifically,\r\n푝-values are the chance of observing 푘 or more successes given the null hypothesis. While that\r\nnuance is irrelevant if you already know for a fact the coin is fair, it is important to keep in mind\r\nin this scenario—our entire goal is, essentially, to analyze whether or not Dream is using a biased\r\ncoin.\r\nArmed with a basic understanding of the binomial distribution, we will now discuss how this\r\ninitial calculation must be corrected in order to be applied to Dream’s runs.\r\nhFor an explanation of why this works, see https://www.youtube.com/watch?v=xSc4oLA9e8o.\r\n9\r\n8 Addressing Bias\r\nThere are a few assumptions of the binomial distribution that are violated in this sample, some\r\nof which were noted in the document Dream published on October 27. This section accounts for\r\nthese violated assumptions, and proves computations that account for these biases.\r\nNote that some of these biases only apply to pearls, as blaze rod drops were examined in the\r\nsame streams as pearls due to the pearl odds, which are independent of the blaze rod drop rate.\r\nThis eliminates the sampling bias from the decision to investigate the pearl odds based on the\r\nfact that they are particularly lucky.\r\n8.1 Accounting for Optional Stopping\r\nThe initial calculation for the 푝-value assumed that barters and rod drops within sequences\r\nof streams are binomially distributed, which is not precisely true (although likely a very good\r\napproximation). For the data to be binomially distributed, the stopping rule—the rule by which\r\nyou decide when to stop collecting data—must be independent of the contents of the data.\r\nFor instance, Dream may be more likely to stop streaming for the day after getting a\r\nparticularly good run, which is more likely to happen on a run with good barters and blaze rods.\r\nIndeed, Dream did stop speedrunning 1.16 RSG after achieving a new personal best time. This\r\nwill result in the data being at least slightly biased towards showing better luck for Dream, and\r\nthus the data is not perfectly binomial.\r\nTo account for the stopping rule, we will correct for the worst possible (most biased) stopping\r\nrule. Imagine that this investigation was being conducted by Shifty Sam, a malicious investigator\r\nwho is trying as hard as possible to report misleading data that will frame Dream. Since a lower\r\n푝-value is more damning, Shifty Sam computes the cumulative 푝-value after every barter or after\r\nevery blaze kill, and stops collecting datai once he deems the 푝-value \"low enough\" to make\r\nthe strongest case against Dream. This is the worst possible stopping rule, since Shifty Sam will\r\nstop collecting data once the 푝-value is arbitrarily low enough (as deemed by him to be most\r\nconvincing). It should be abundantly clear that this stopping rule is far worse than whatever\r\nstopping rule Dream actually followed during his runs.\r\nIt may not be immediately obvious how we can calculate a 푝-value under this stopping rule.\r\nWe cannot look directly at the number of success in the data, as that is always going to be\r\nexceptional to this degree. What we can consider, however, is how quickly Shifty Sam reached his\r\n푝-value cutoff. Intuitively, we might expect Shifty Sam to spend a long time waiting for the data\r\nto reach his 푝-value cutoff. To put it another way, it would certainly be surprising, regardless\r\nof how shifty Sam is, to hear that Dream got 30 successful barters in a row as soon as Shifty\r\nSam started looking at the data. Knowing that Shifty Sam only decided to show you this data\r\nbecause it supported his argument would not really make that any less surprising (concerns about\r\nsampling bias aside—those will be addressed later).\r\nSince the data reaching a 푝-value this extreme so soon is somewhat surprising even if we\r\nknow the data comes from Shifty Sam, we will look at the probability that Shifty Sam stops\r\ncollecting data at least as soon as Dream stopped. In other words, if 푛 is the number of trials\r\nin Dream’s data, our corrected 푝-value will be the probability that a series of trials will, at any\r\npoint on or prior to the 푛th trial, have a binomial CDF 푝-value at least as small as the one for\r\nDream’s data.\r\niSince Shifty Sam here is supposed to represent whatever caused Dream to choose to stop running 1.16 RSG,\r\nsuppose Shifty Sam is, say, Dream’s manager, and can tell Dream when to stop or continue streaming.\r\n10\r\nAlthough that value could be computed through brute force, that approach would involve\r\nevaluating the probability and 푝-values for well over 2\r\n305 different sequences—which is obviously\r\ncomputationally intractable. As such, we used a method that allowed for dealing with multiple\r\nsequences at once. The exact algorithm is somewhat involved, so a description has been included\r\nin Appendix B for interested readers.\r\n8.2 Sampling Bias in Stream Selection\r\nAs mentioned previously, we chose to analyze Dream’s runs from the point that he returned to\r\nstreaming rather than all of his runs due to a belief that, if he cheated, it was likely from the point\r\nof his return to streaming rather than from his first run. Although we cannot be entirely certain,\r\nit is also likely that MinecrAvenger decided to investigate Dream’s streams due to noticing that\r\nthey were unusually lucky. This, of course, means that the streams investigated are not actually\r\na true random sample. Even if MinecrAvenger somehow chose streams to investigate at complete\r\nrandom, we are choosing to investigate these streams due to the fact that they are lucky. Thus,\r\nwe cannot treat this as a true random sample.\r\nTo account for the maximum possible amount of sampling bias, imagine that Shifty Sam\r\ninspected every speedrun stream done by Dream and reported whatever sequence of consecutive\r\nstreams was the most suspicious.j This would produce the strongest possible bias—or at least a\r\nbias much stronger than there actually is—from the choice of these particular Dream streams.\r\nRecall the example of investigating the 20 back-to-back heads within 100 coin flips from\r\nearlier. Much like you could calculate the probability of 20 consecutive heads occurring at any\r\npoint in the 100 flips, we can calculate the probability that Dream experienced bartering luck\r\nthis unlikely in any series of consecutive streams. This would account for the bias from Shifty\r\nSam, and thus more than account for the actual bias under consideration.\r\nTo calculate the chance that at least one sequence of streams is this lucky, we first calculate\r\nthe chance that no sequence is. Assuming independence, we can do this by taking the chance\r\nthat a given sequence isn’t sufficiently lucky (1 − 푝) to the power of the number of sequences, 푚.\r\nIf an event occurs more than zero times, then it must have occurred at least once, so we can then\r\nsubtract (1 − 푝)\r\n푚 from one to get the chance that it occurs at least once, giving 1 − (1 − 푝)\r\n푚.\r\nThe number of consecutive sequences consisting of at least two streams from a set of 푛\r\nstreams is\r\n푛\r\n2\r\n\u0001\r\n, as you choose two different streams to be the first and last. Adding in the 푛\r\nsequences consisting of only one stream, which were not included because the first and last\r\nstream are the same stream, you get\r\n푛\r\n2\r\n\u0001\r\n+ 푛 which is equal to 푛(푛+1)\r\n2\r\n.\r\nWe can now get an upper bound 푝푛 on the 푝-value across 푛 streams, using the 푝-value\r\nderived from our sample.\r\n푝푛 ≤ 1 − (1 − 푝)\r\n푛(푛+1)\r\n2 (4)\r\nAt this point, let us go back and analyze an earlier assumption we made: that the 푝-values\r\nbetween sequences of streams are independent of one another. This assumption is false—however,\r\nit is not false in a way that could cause 푝푛 to be greater than this upper bound.\r\nConsider the exact way in which the sequences of streams are dependent on one another.\r\nSince they all contain streams from the same set (those from Dream), some of the data in each\r\nsequence will be identical to that in other sequences. This lowers the chance that Shifty Sam\r\njWe can safely assume the streams reported would be consecutive—it would be extremely obvious that the\r\nstreams were cherry-picked if Shifty Sam reported the luck in, say, Dream’s first, seventh, and tenth streams.\r\nNon-consecutive streams could be reported credibly in unusual circumstances, but that possibility is essentially\r\nnegligible.\r\n";

        public override string ItemLore => "";

        public override ItemTier Tier => ItemTier.NoTier;

        public override Enum[] ItemTags => new Enum[] { ItemTag.AIBlacklist };

        public override GameObject ItemModel => null;

        public override Sprite ItemIcon => Main.SecondaryAssets.LoadAsset<Sprite>("Assets/Icons/Items/dream.pdf.png");

        public override void Init(ConfigFile config)
        {
            base.Init(config);
        }

        public override ItemDisplayRuleDict CreateItemDisplayRules()
        {
            return new ItemDisplayRuleDict(null);
        }

        public override void Hooks()
        {
        }
    }
}